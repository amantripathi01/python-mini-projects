"""
Test generated by RoostGPT for test aman-4Dec using AI Type Open AI and AI Model gpt-4

1. **Scenario**: Test if the alarm triggers at the correct set time
   - **Given**: The alarm is set for a specific time
   - **When**: The current time matches the set alarm time
   - **Then**: The alarm should trigger and print "Time to Wake up"
   
2. **Scenario**: Test if the alarm doesn't trigger before the set time
   - **Given**: The alarm is set for a specific time
   - **When**: The current time is before the set alarm time
   - **Then**: The alarm should not trigger
   
3. **Scenario**: Test if the alarm doesn't trigger after the set time
   - **Given**: The alarm is set for a specific time
   - **When**: The current time is after the set alarm time
   - **Then**: The alarm should not trigger
   
4. **Scenario**: Test if the alarm plays the correct sound file
   - **Given**: The alarm is set and the time matches the set alarm time
   - **When**: The alarm is triggered
   - **Then**: The sound "sound.wav" should be played
   
5. **Scenario**: Test if the alarm triggers again if not stopped and time matches again
   - **Given**: The alarm has been triggered previously and not stopped
   - **When**: The current time matches the set alarm time again (24 hours later)
   - **Then**: The alarm should trigger again

6. **Scenario**: Test if the alarm prints the current time and set alarm time every second
   - **Given**: The alarm is set for a specific time
   - **When**: Every second passes
   - **Then**: The current time and set alarm time should be printed
"""
import pytest
import alarm_clock
import datetime
import time
import winsound
from unittest.mock import patch

@patch('alarm_clock.datetime.datetime.now')
@patch('alarm_clock.winsound.PlaySound')
@patch('alarm_clock.time.sleep')
def test_alarm_triggers_at_correct_time(mock_sleep, mock_play_sound, mock_datetime_now):
    # Mocking the current time to be the same as the set time
    mock_datetime_now.return_value.strftime.return_value = '00:00:00'
    # Setting the alarm time
    alarm_clock.hour.set('00')
    alarm_clock.minute.set('00')
    alarm_clock.second.set('00')
    # Running the alarm function
    alarm_clock.alarm()
    # Checking if the play sound function was called
    assert mock_play_sound.called

@patch('alarm_clock.datetime.datetime.now')
@patch('alarm_clock.winsound.PlaySound')
@patch('alarm_clock.time.sleep')
def test_alarm_doesnt_trigger_before_time(mock_sleep, mock_play_sound, mock_datetime_now):
    # Mocking the current time to be a minute before the set time
    mock_datetime_now.return_value.strftime.return_value = '00:00:59'
    # Setting the alarm time
    alarm_clock.hour.set('00')
    alarm_clock.minute.set('01')
    alarm_clock.second.set('00')
    # Running the alarm function
    alarm_clock.alarm()
    # Checking if the play sound function was not called
    assert not mock_play_sound.called

@patch('alarm_clock.datetime.datetime.now')
@patch('alarm_clock.winsound.PlaySound')
@patch('alarm_clock.time.sleep')
def test_alarm_doesnt_trigger_after_time(mock_sleep, mock_play_sound, mock_datetime_now):
    # Mocking the current time to be a minute after the set time
    mock_datetime_now.return_value.strftime.return_value = '00:02:00'
    # Setting the alarm time
    alarm_clock.hour.set('00')
    alarm_clock.minute.set('01')
    alarm_clock.second.set('00')
    # Running the alarm function
    alarm_clock.alarm()
    # Checking if the play sound function was not called
    assert not mock_play_sound.called

@patch('alarm_clock.datetime.datetime.now')
@patch('alarm_clock.winsound.PlaySound')
@patch('alarm_clock.time.sleep')
def test_alarm_plays_correct_sound(mock_sleep, mock_play_sound, mock_datetime_now):
    # Mocking the current time to be the same as the set time
    mock_datetime_now.return_value.strftime.return_value = '00:00:00'
    # Setting the alarm time
    alarm_clock.hour.set('00')
    alarm_clock.minute.set('00')
    alarm_clock.second.set('00')
    # Running the alarm function
    alarm_clock.alarm()
    # Checking if the correct sound file was passed to the play sound function
    mock_play_sound.assert_called_with('sound.wav', winsound.SND_ASYNC)

@pytest.mark.parametrize('current_time, alarm_time, expected', [
    ('00:00:00', '00:00:00', True),
    ('00:00:59', '00:01:00', False),
    ('00:02:00', '00:01:00', False)
])
@patch('alarm_clock.datetime.datetime.now')
@patch('alarm_clock.winsound.PlaySound')
@patch('alarm_clock.time.sleep')
def test_alarm_triggers_again_if_not_stopped_and_time_matches_again(mock_sleep, mock_play_sound, mock_datetime_now, current_time, alarm_time, expected):
    # Mocking the current time
    mock_datetime_now.return_value.strftime.return_value = current_time
    # Setting the alarm time
    alarm_clock.hour.set(alarm_time.split(':')[0])
    alarm_clock.minute.set(alarm_time.split(':')[1])
    alarm_clock.second.set(alarm_time.split(':')[2])
    # Running the alarm function
    alarm_clock.alarm()
    # Checking if the play sound function was called or not
    assert mock_play_sound.called == expected

@patch('alarm_clock.datetime.datetime.now')
@patch('alarm_clock.time.sleep')
def test_alarm_prints_current_time_and_set_alarm_time_every_second(mock_sleep, mock_datetime_now):
    # Mocking the current time
    mock_datetime_now.return_value.strftime.return_value = '00:00:00'
    # Mocking the built-in print function to capture the print statements
    with patch('builtins.print') as mock_print:
        # Setting the alarm time
        alarm_clock.hour.set('00')
        alarm_clock.minute.set('01')
        alarm_clock.second.set('00')
        # Running the alarm function
        alarm_clock.alarm()
        # Checking if the current time and set alarm time was printed
        mock_print.assert_called_with('00:00:00', '00:01:00')
